* About
This file is used a project management tool for the gatherflashes program.
* Resources
** Moving point past a property drawer
https://www.reddit.com/r/orgmode/comments/hrxc6a/move_to_first_line_after_drawers/

** org-mode parser libaries
[[https://orgmode.org/worg/dev/org-element-api.html][Org Element API]]
* Issues
* todo
** loop over all headings of an org document, displaying them
* Implementing
* Testing
* Failed test
* done
* Notepad
** Resources
*** Information about reading input in emacs
input streams
*** Information about printing input in emacs
output streams
*** Information about interactive functions
interactive call
** declare a function argument as optional
*** Answer
#+begin_src elisp
  (defun somefunc (&optional optionalArgument))
#+end_src
** declare a function with a variable number of arguments
#+begin_src elisp
  (defun somefunc (&rest ...args))
#+end_src
** define a function that writes its arguments to the minibuffer
** Give a short explanation of the terms, read syntax and printed representation.
*** Answer
*Reading* a lisp object means parsing a lisp expression in textual form and
producing a corresponding lisp object. this is how lisp programs get into lisp
from files of lisp code. We call the text the *read syntax* of the object.
For example, the text '(a . 5)' is the read syntax for a cons cell whose CAR is
'a' and whose CDR is the number 5.

*Printing* a lisp object means producing text that represents that
object; converting the object to its *printed representation*. Printing the cons
cell described above produces the text '(a . 5)'.
** Which objects do not have equivalent read syntaxes and printed representations
*** Answer
- buffers
- windows
- frames
- subprocesses
- markers
** Define a non interactive function that reads the user's name from the minibuffer and prints it to the minibuffer
*** Answer

#+begin_src elisp
  ;; "t" used as an input stream means that the input is read from the minibuffer.
  ;; "t" used as an output stream means that the output is displayed in the echo area.
  (defun my-get-name ()
    "Read the user's name from the minibuffer and write it back to the echo area"
    (let ((name (read t)))
      (print name)))

  (my-get-username)
#+end_src

** Define an interactive function that reads the user's name from the minibuffer and prints it to the minibuffer
*** Answer

#+begin_src elisp
  ;; "t" used as an input stream means that the input is read from the minibuffer
  ;; "t" used as an output stream means that the output is displayed in the echo area
  (defun my-interactive-get-name (name)
    "Read interactively the user's name from the minibuffer and write it back to the echo area"
    (interactive "sWhat is your name: ")
    (print (concat "Hi " name)))
#+end_src

** What is the signature of the interactive function, explain its arguments and operations
*** Answer
#+begin_src elisp
  (interactive &optional arg-descriptor &rest modes)
#+end_src

** insert-flash-card, keep the property drawer open
(defun insert-flash-card(title)
  "Create a new flash-card"
  (interactive "stitle: ")
  (org-insert-heading '(4) nil t)
  (insert title)
  (newline-and-indent)
  (org-insert-property-drawer)
  (forward-line -1)
  (org-fold-hide-drawer-toggle)
  (org-entry-put (point) "CATEGORY" "flash")
  (org-entry-put (point) "REVISION_DATE" "rev date")
  (end-of-line 4)
  (org-insert-subheading 1)
  (insert "Answer")
  (newline-and-indent)
  )

** Time functions
;; (current-time)
;; (date-to-time "2023-10-22")
;; (time-less-p (date-to-time "2023-10-22") nil)
;; (flashcard-revdate-is-today "2023-10-22T13:45:00")


;; (current-time-string)

;; (float-time)



;; ;; Get NOW as a TIMESTAMP
;; ;; where TIMESTAMP is the seconds since epoch
;; (time-convert nil 'integer)1698056444
;; (time-convert (current-time) 'integer)1698056441

;; ;; get NOW as a TIMESTAMP
;; ;; where TIMESTAMP is in lisp format
;; (current-time)
;; (time-convert (current-time) 'list)(25910 18728 787390 752000)
;; (time-convert nil 'list)(25910 18733 933452 529000)

;; ;; get NOW as a STRING
;; ;; where STRING is in iso-8601 extended format.
;; (format-time-string "%FT%T%z" nil)"2023-10-23T13:55:11+0300"
;; (format-time-string "%FT%T%z" (current-time))"2023-10-23T13:55:07+0300"

;; ;; convert a STRING in iso-8601 extended format
;; ;; into a TIMESTAMP in lisp format
;; (iso8601-parse "2023-10-23T13:40:00")
;; (encode-time (iso8601-parse "2023-10-23T13:40:00"))

;; ;; convert a TIMESTAMP into an ISO8601 extended format
;; (format-time-string "%FT%T" TIMESTAMP)

;; (current-time-string)"Mon Oct 23 13:37:59 2023"

;; (current-time)(25910 19733 978225 30000)

;; (encode-time (current-time))

;; (encode-time nil)

;; ;; (iso8601-parse (current-time))
;; (format-time-string "%FT%T" (org-read-date 't 't))

;; (setq iso8601-format-specifier "%FT%T")

;; (setq d1 (flashcard-revdate-to-timestamp (format-time-string iso8601-format-specifier nil)))


;; (setq d2 (flashcard-revdate-to-timestamp (format-time-string iso8601-format-specifier nil)))

;; (time-less-p d1 d2)

;; (format-time-string "%d" (current-time))


** Org-element-parse-buffer

returns a list of elements or objects.

Each element is a list conforming to the syntax

(type properties contents)

to get the contents of the element one may use the function

(org-element-contents)

** org-element-interpret-data
** Create a temporary buffer
(get
** Make a buffer current
(set-buffer "buffervname")
(set-buffer #buffer)
** Create a buffer or re-use an already existing one
(get-buffer-create "gather"


** Org motion
*** next sibling
(org-forward-heading-same-level)
*** previous sibling
(org-backward-heading-same-level)
